freemlib for Neo-Geo - Sound Driver
===================================
This will easily take up a lot of time because I have no fucking idea what I'm
doing, and the public documentation for writing a Neo-Geo sound driver from
scratch is pretty sparse (and focused on ADPCM, since FM is hard and nearly no
one wants to use the SSG for music). On top of that, I've recently learned that
the MVSTracker driver doesn't work on original hardware:

"For the 'homebrew' scene, we had a very basic sound driver that Ivan (MVS Tracker)
and myself worked on many years ago. Ivan did a very good job of implementing
FM music but the driver didn't work on real hardware."
src: http://www.archaic.fr/articles/interview-jeff-kurtz-repond-a-nos-questions/3/

However, after looking at smkdan's M1 driver, it seems this is an easily fixable
problem that just needs some testing.

This document is a work in progress! Everything is subject to change!

--------------------------------------------------------------------------------
Most of this seems like it'd be on the Z80 end, but I still have to define some
codes for 68K<->Z80 comms.

SNK drivers consider the following codes to be used for audio data:
* $20-$5F	Music (64 songs; $5F reserved for eyecatch)
* $60-$FF	Sound (160 sounds; $7F reserved for coin sound)
 * $60-$7F	SSG effects (32 sounds)
 * $80-$BF	ADPCM-B samples (64 sounds)
 * $C0-$FF	ADPCM-A samples (64 sounds)

<SNK System Commands>
This list isn't 100% finalized yet, as I need to figure out what the SNK drivers
actually do with various commands.
(Also, what version of the music driver does this match up with?)

Commands marked with a * are used by the BIOS.

$00    No command
$01    *Slot change
$02    *Play eyecatch BGM ($5F)
$03    *Soft reset
$04    ALL DI (disable music & sound effects; $7F/coin noise excepted)
$05    MUSIC DI (disable music)
$06    EFFECT DI (disable sound effects)
$07    ALL EI (enable music & sound effects)
$08    MUSIC EI (enable music)
$09    EFFECT EI (enable sound effects)
$0A    Fade Out [1 arg, fade out speed]
$0B    (undocumented)
$0C    (undocumented)
$0D    (undocumented)
$0E    Tempo Change [1 arg, new tempo]
$0F    SSG Stop
$10    ROM/RAM check ("Please do not send this code.")
$11    Fade Out Stop
$12    (undocumented)
$13    (undocumented)
$14    ADPCMA(TBL_KEY_PCMA) sound effect stop  [1 arg, sound to silence]
$15    ADPCMA(TBL_KEY_PCMA2) sound effect stop [1 arg, sound to silence]
$16    (undocumented)
$17    (undocumented)
$18    ADPCMA(TBL_KEY_PCMA) sound effect start  [1 arg, sound to start]
$19    ADPCMA(TBL_KEY_PCMB) sound effect start  [1 arg, sound to start]
$1A    ADPCMA(TBL_KEY_PCMA2) sound effect start [1 arg, sound to start]
$1B    ADPCMA(TBL_KEY_PCMB2) sound effect start [1 arg, sound to start]
$1C    ADPCMA(TBL_KEY_PCMA3) sound effect start [1 arg, sound to start]
$1D    (undocumented)
$1E    (undocumented)
$1F    (undocumented)

<freemlib System Commands>
The data that was here is now in sound/soundCommands.txt.

================================================================================
<Functionality>
The sound driver's functionality depends on the sound hardware itself.

Z80 I/O ports:
$00    (read) Sound Code input (Communication from 68K to Z80)
$00    (write) Clear Sound Code input
$04    (read) [YM] Status 0 (Busy, Timer A and B flags)
$05    (read) [YM] SSG registers
$06    (read) [YM] Status 1 (ADPCM flags for samples reaching end address)
$08    (write) Enable NMI
$0C    (write) Sound Code output (Communication from Z80 to 68K)
$18    (write) Disable NMI
$C0    (write) ???

Banking is also done via the I/O ports, see "Z80 Banking" section below.

(CD-specific?)
$80    (write) ???
$C1    (write) ???
$C2    (write) ???


The YM2610 gives us:
* Timers   (2 timers, A and B)
* SSG      (3 channels)
* FM       (4 channels)
* ADPCM-A  (6 channels, 18.5kHz sampling rate)
------------------------------------------------------
* ADPCM-B  (1 channel, 1.8kHz~55.5kHz sampling rate); cart systems only
* CDDA     (CD audio, 44.1kHz sampling rate); CD systems only

[Timers]
Writes to ports $04 (addr) and $05 (data)

$24    Timer A counter (upper 8 bits)
$25    Timer A counter (lower 2 bits)
$26    Timer B counter
$27    Control/Flags/etc.

(Timer A musings)
8333 microsec: 98/$62 (~120.0048 times/second)
8325 microsec: 99/$63 (~120.120 times/second)

Some SNK drivers have a set of values for Timer A:
* $01E (30)   (72*(1024-30))/8000000  = 0.008946 sec | 8946 microsec (~112 times/second)
* $028 (40)   (72*(1024-40))/8000000  = 0.008856 sec | 8856 microsec (~113 times/second)
* $032 (50)   (72*(1024-50))/8000000  = 0.008766 sec | 8766 microsec (~114 times/second)
* $051 (81)   (72*(1024-81))/8000000  = 0.008487 sec | 8487 microsec (~118 times/second; typically set as default)
* $0C0 (192)  (72*(1024-192))/8000000 = 0.007488 sec | 7488 microsec (~134 times/second)
* $1D5 (469)  (72*(1024-469))/8000000 = 0.004995 sec | 4995 microsec (~200 times/second)
* $2EB (747)  (72*(1024-747))/8000000 = 0.002493 sec | 2493 microsec (~401 times/second)

SNK drivers seem to use Timer A as the sound effect playback timer...

(Timer B musings)
* $01 (1)    (1152*(256-1)/8)   = 36720 microsec | 0.036720 sec
* $46 (70)   (1152*(256-70)/8)  = 26784 microsec | 0.026784 sec
* $47 (71)   (1152*(256-71)/8)  = 26640 microsec | 0.026640 sec
* $FF (255)  (1152*(256-255)/8) = 144 microsec   | 0.000144 sec

SNK drivers typically use Timer B as the tempo (for music playback).

[SSG]
Writes to ports $04 (addr) and $05 (data)

Overall Operation:
$06    Noise period (> 5 bits)
$07    /EN flags for A,B,C, and noise A,B,C. (CBA order, noise then tone)
$0B    Volume envelope period fine tune
$0C    Volume envelope period coarse tune
$0D    Volume envelope shape

per-Channel (all channels listed)
$00    Channel A fine tune     \ 12 bits
$01    Channel A coarse tune   /
$02    Channel B fine tune     \ 12 bits
$03    Channel B coarse tune   /
$04    Channel C fine tune     \ 12 bits
$05    Channel C coarse tune   /
$08    Channel A Mode/Volume
$09    Channel B Mode/Volume
$0A    Channel C Mode/Volume

[ADPCM-A]
Writes to ports $06 (addr) and $07 (data).
Note that ADPCM-A flag control is with the ADPCM-B registers.

$00    Key On/Off + Channel bits (0=play, 1=stop)
$01    Master Volume

One value for each channel out of these sets:
$08-$0D  L/R and Channel Volume
$10-$15  Sample start address/256 (LSB)
$18-$1D  Sample start address/256 (MSB)
$20-$25  Sample end address/256 (LSB)
$28-$2D  Sample end address/256 (MSB)

[ADPCM-B]
Writes to ports $04 (addr) and $05 (data)

$10    Start/Repeat/Reset flags?
$11    L/R flags?
$12    Sample start address/256 (LSB)
$13    Sample start address/256 (MSB)
$14    Sample end address/256 (LSB)
$15    Sample end address/256 (MSB)
$19    Delta-N (L) \ these two determine
$1A    Delta-N (H) / sample playback rate
$1B    ADPCM-B channel volume
$1C    ADPCM-A & B channels flag control 

[FM]
FM is the most complex.
Channels 1 and 2 live on ports $04/$05. Channels 3 and 4 live on ports $06/$07.
Channels 3 and 4 are actually internally known as channels 5 and 6.

$22    LFO Frequency Control
$28    Key On/Off

$A1,$A2    F-Num 1
$A5,$A6    Block and F-Num 2
$A9,$AA    2CH * F-Num 1
$AD,$AE    2CH * Block and 2CH * F-Num 2
$B1,$B2    Self Feedback (FB) and Connection (ALGO?)
$B5,$B6    L/R, AMS, PMS

per-channel variables (4 operators per channel):
$31-$3E    Detune (DT)/Multiple (MULTI)
$41-$4E    Total Level (TL)
$51-$5E    Key Scale (KS)/Attack Rate (AR)
$61-$6E    AM ON (AM)/Decay Rate (DR)
$71-$7E    Sustain Rate (SR)
$81-$8E    Sustain Level (SL)/Release Rate (RR)
$91-$9E    SSG-Type Envelope control

================================================================================
<RAM>
RAM exists from $F800-$FFFF.
$FFFD and $FFFE are used for the infinite jump, and the stack's bottom is $FFFC.
--------------------------------------------------------------------------------
Driver Stuff

todo: replace these two with indices into the command buffer
* Current Command
* Previous Command

* Command buffer (64 bytes is used in MAKOTO v3 and later; should be enough?)

* Channel Enable/Disable Flags

--------------------------------------------------------------------------------
Song Attributes/Playback
* Current Song number
* Current Song Tempo (0-255)
* Channel Use flags (2 bytes)

* Song loop flag?
* Song loop point pointer? (shared between channels)
* Song playback timer?

--------------------------------------------------------------------------------
Hardware Stuff

[Timers]
4 bytes:
 * 1 byte for Timer A 9-2 ($24)
 * 1 byte for Timer A 1-0 ($25)
 * 1 byte for Timer B ($26)
 * 1 byte for Timer Control and 2CH Mode ($27)

2CH Mode Settings:
00    Normal       | Normal output
01    CSM          | CSM voice synth; each slot can have its own frequency. Key on/off is done with timer A.
10    Effect sound |Separate frequency number and CSM can be set in each slot.
11    Illegal?

CSM = Composite Sinusoidal Modeling
http://en.wikipedia.org/wiki/Formant

[SSG]
Looks like 14 bytes based on the following:

Overall Status>
 * 1 byte for value at $07 (Channels A,B,C,Noise)
 * 2 bytes for volume envelope period tuning
 * 1 byte for volume envelope shape ($0D)
If you wanted to be clever, you could combine $07 and $0D...

Pulse (x3)>
 * 2 bytes for tune
 * 1 byte for Mode/Volume

Noise>
 * 1 byte for noise period.

[ADPCM-A]
There are 6 channels of ADPCM-A audio, so if it looks small, rest assured that
it will take up a lot of space. 32 bytes in total, actually.

Overall Status>
 * 1 byte for Dump and Channel Toggle ($00)
 * 1 byte for Master Volume ($01)

Per-Channel>
 * 1 byte for L/R and Channel Volume ($08-$0D)
 * 2 bytes for sample start address ($10-15, $18-$1D)
 * 2 bytes for sample end address ($20-25, $28-$2D)

[ADPCM-B]
Since only one sample can play at a time, we don't need nearly as much space.

9 bytes maybe? Could possibly be 8 if combining $10 and $11.

Overall Status>
 * 1 byte for Start/Repeat/Reset? ($10)
 * 1 byte for L/R ($11)
 * 2 bytes for sample start address ($12,$13)
 * 2 bytes for sample end address ($14,$15)
 * 2 bytes for sample playback rate ($19,$1A)
 * 1 byte for channel volume ($1B)

ADPCM-B Sampling Rate>
[(Delta-N(H) + Delta-N(L)) / 256] x 55.5 KHz

Examples:
 * Delta-N (H) = 85 (0x55), Delta-N (L) = 33 (0x21); Frequency = 18,050 KHz
  * [(85 + 33) / 256] = 0.4609375; x55.5 = 25.58203125
 * Delta-N (H) = 101 (0x65), Delta-N (L) = 71 (0x47); Frequency = 22,050 KHz
 * Delta-N (H) = 203 (0xCB), Delta-N (L) = 42 (0x2A); Frequency = 44,100 KHz
  * 0xC2BA??

[FM]
This part is going to take up the most space because FM synthesis is the
result of a lot of values (on this chip, each channel has four operators).
Multiply that by 4 channels.

Overall Status>
 * 1 byte for LFO, Freq. Control ($22)
 * 1 byte for Key On/Off ($28)

Frequency Control (0-7): 3.98, 5.56, 6.02, 6.37, 6.88, 9.63, 48.1, 72.2 Hz

Per-Channel>
 * 2 bytes for Frequency
 * 1 byte for Feedback/Connection (algorithm)
 * 1 byte for L/R, AMS, PMS

"The frequency is a 14-bit number that should be set high byte, low byte 
(e.g. ports $A4 then $A0). The highest 3 bits, called the "block", give the octave.
The next 10 bits give the position in the octave."

Write Block+High 3 first, then the Low 8

"Feedback is the degree to which operator 1 feeds back into itself"
Feedback: 0, pi/16, pi/8, pi/4, pi/2, pi, 2pi, 4pi

AMS (0-3): 0, 1.44, 5.9, 11.8 dB
PMS (0-7): 0, 3.4, 6.7, 10, 14, 20, 40, 80

Per-Operator>
 * 1 byte Detune, Multiple
 * 1 byte Total Level
 * 1 byte Key Scale/Attack Rate
 * 1 byte AM ON/Decay Rate
 * 1 byte Systain Rate
 * 1 byte Sustain Level/Release Rate
 * 1 byte SSG-type Envelope Control
 
================================================================================
(aside: MVSTracker instruments)
MVSTracker instruments are 25 bytes.

Order of data:
* detune/multiple op1
* detune/multiple op2
* detune/multiple op3
* detune/multiple op4
* total level op1
* total level op2
* total level op3
* total level op4
* key scale/attack op1
* key scale/attack op2
* key scale/attack op3
* key scale/attack op4
* decay/AM on op1
* decay/AM on op2
* decay/AM on op3
* decay/AM on op4
* sustain op1
* sustain op2
* sustain op3
* sustain op4
* suslevel/release op1
* suslevel/release op2
* suslevel/release op3
* suslevel/release op4
* feedback/connection

How this data maps to the addresses:
InstrAddr1: ; Neo 1 (FM 1 on 4/5, FM3 on 6/7)
	.db $31,$35,$39,$3D|$41,$45,$49,$4D|$51,$55,$59,$5D
	.db $61,$65,$69,$6D|$71,$75,$79,$7D|$81,$85,$89,$8D
	.db $B1

InstrAddr2: ; Neo 2 (FM2 on 4/5, FM4 on 6/7)
	.db $32,$36,$3A,$3E|$42,$46,$4A,$4E|$52,$56,$5A,$5E
	.db $62,$66,$6A,$6E|$72,$76,$7A,$7E|$82,$86,$8A,$8E
	.db $B2

================================================================================
<Z80 Banking>
Needing to deal with this at some point.

$8000-$BFFF    16KiB    Switchable bank 3 [default $02] (I/O port 0xB)
$C000-$DFFF     8KiB    Switchable bank 2 [default $06] (I/O port 0xA)
$E000-$EFFF     4KiB    Switchable bank 1 [default $0E] (I/O port 9)
$F000-$F7FF     2KiB    Switchable bank 0 [default $1E] (I/O port 8)

Examples from Art of Fighting (MAKOTO v3 driver)

Bank 0:
 * $02 = $8000, original    (16*2=32K, or $8000 raw address)
 * $04 = $8000, second bank (16*4=64K, or $10000 raw address)

Bank 1:
 * $06 = $C000, original    (8*6=48K, or $C000 raw address)
 * $0A = $C000, second bank (8*10=80K, or $14000 raw address)

Bank 2:
 * $0E = $E000, original    (4*14=56K, or $E000 raw address)
 * $16 = $E000, second bank (4*22=88K, or $16000 raw address)

Bank 3:
 * $1E = $F000, original    (2*30=60K, or $F000 raw address)
 * $2E = $F000, second bank (2*46=92K, or $17000 raw address)

Examples from COUGH NINETY EIGHT

.db 0x1E    $F000, original     (2*30=60K,   or $F000 raw address)
.db 0xE     $E000, original     (4*14=56K,   or $E000 raw address)
.db 6       $C000, original     ( 8*6=48K,   or $C000 raw address)
.db 2       $8000, original     (16*2=32K,   or $8000 raw address)
--------------------------------------------------------------------------------
.db 0x2E    $F000, second bank  (2*46=92K,   or $17000 raw address)
.db 0x16    $E000, second bank  (4*22=88K,   or $16000 raw address)
.db 0xA     $C000, second bank  (8*10=80K,   or $14000 raw address)
.db 4       $8000, second bank  (16*4=64K,   or $10000 raw address)
--------------------------------------------------------------------------------
.db 0x3E    $F000, third bank   (2*62=124K,  or $1F000 raw address)
.db 0x1E    $E000, third bank   (4*30=120K,  or $1E000 raw address)
.db 0xE     $C000, third bank   (8*14=112K,  or $1C000 raw address)
.db 6       $8000, third bank   ( 16*6=96K,  or $18000 raw address)
--------------------------------------------------------------------------------
.db 0x4E    $F000, fourth bank  (2*78=156K,  or $27000 raw address)
.db 0x26    $E000, fourth bank  (4*38=152K,  or $26000 raw address)
.db 0x12    $C000, fourth bank  (8*18=144K,  or $24000 raw address)
.db 8       $8000, fourth bank  (16*8=128K,  or $20000 raw address)
--------------------------------------------------------------------------------
.db 0x5E    $F000, fifth bank   ( 2*94=188K, or $2F000 raw address)
.db 0x2E    $E000, fifth bank   ( 4*46=184K, or $2E000 raw address)
.db 0x16    $C000, fifth bank   ( 8*22=176K, or $2C000 raw address)
.db 0xA     $8000, fifth bank   (16*10=160K, or $28000 raw address)
--------------------------------------------------------------------------------
.db 0x6E    $F000, sixth bank   (2*110=220K, or $37000 raw address)
.db 0x36    $E000, sixth bank   ( 4*54=216K, or $36000 raw address)
.db 0x1A    $C000, sixth bank   ( 8*26=208K, or $34000 raw address)
.db 0xC     $8000, sixth bank   (16*12=192K, or $30000 raw address)
--------------------------------------------------------------------------------
.db 0x7E    $F000, seventh bank (2*126=252K, or $3F000 raw address)
.db 0x3E    $E000, seventh bank ( 4*62=248K, or $3E000 raw address)
.db 0x1E    $C000, seventh bank ( 8*30=240K, or $3C000 raw address)
.db 0xE     $8000, seventh bank (16*14=224K, or $38000 raw address)

================================================================================
<Thought Sketchpad>

Channel Mappings, "Normal" (6 channels; YM2608/2612) -> YM2160
1 -> 1
2 -> 2
3 -> 5
4 -> 6

Z80Wait from smkdan's adpcma_demo2
