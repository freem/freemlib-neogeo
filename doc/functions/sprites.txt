freemlib for Neo-Geo - Sprite functionality
===========================================
In order to use Sprites, you need to know how the data is laid out.
In the VRAM, there are four sections called SCB (Sprite Control Blocks).
Each SCB section controls a different part of the sprite.

{SCB1}
SCB1 holds the tilemaps, palette, auto-animation, and flip bits.

Tile number        0000|00000000
Palette            00000000
Auto-anim modes    2-bit/3-bit, one bit for each
HFlip, VFlip       one bit each

(actual formats)
SCB1 first word:
FEDCBA98 76543210
tttttttt tttttttt

SCB1 second word:
FEDCBA98 76543210
pppppppp TTTTAAVH

t = Tile number LSB
p = Palette
T = Tile number MSB
A = Auto-animation bits (2=2-bit, 3=3-bit)
V = Vertical flip
H = Horizontal flip

--------------------------------------------------------------------------------

{SCB2}
SCB2 holds the shrinking coefficients.
Horiz. Size        0000
Vert.  Size        00000000

(actual format)
FEDCBA98 76543210
----HHHH VVVVVVVV

- = unused
H = horizontal scale
V = vertical scale

--------------------------------------------------------------------------------

{SCB3}
SCB3 holds the vertical positions, sticky/chain bit, and sprite tile size.
Y Position         000000000
Sticky/Chain Bit   one bit
Sprite Size        000000

(actual format)
FEDCBA98 76543210
YYYYYYYY YCSSSSSS

Y = Y position
C = sticky/chain bit
S = sprite size

--------------------------------------------------------------------------------

{SCB4}
SCB4 has the horizontal position only.
X position         000000000

(actual format)
FEDCBA98 76543210
XXXXXXXX X-------

X = X position
- = unused

--------------------------------------------------------------------------------

After the SCB sections is the Sprite List. I'm not 100% sure how it operates.

{Sprite List (Even Scanlines)} $8600-$867F
{Sprite List (Odd Scanlines)}  $8680-$86FF
I think the system/LSPC throws the sprite numbers into here automatically,
but I'm not sure how they map to the scanlines or whatever.

================================================================================
<Brainstorming>
Sprites are usually transferred to the VRAM in VBlank...

* DATlib does this
* AOF does this
* smkdan's two scrolling demos do this (scroll1.asm being easier to understand)
* furrtek's nyancat demo does this
* Frog Feast does it
...the list goes on.

[Frog Feast]
* "SpritesChanged" can skip the logic in RenderSprites if needed.

[smkdan scroll2.asm]
(scroll1 is easier, but scroll2 is more flexible)
* "vramlist": 512 words (list of addresses, increments, and data to upload to VRAM)
* "vramptr":  1 dword (current pointer into vramlist, reset every frame)

vramlist entries:
0       Number of words in this entry ("n")
1       VRAM address
2       VRAM increment
3..n    data words

Main loop:
* update previous scroll values
* ControllerScroll  ; scroll background
* ClampScroll       ; make sure scroll stays within bounds
* CheckUpdate       ; see if sprite VRAM needs to be updated
* BufferSCB3        ; yscroll, ysize, chain
* BufferSCB4        ; xscroll

VBlank:
* UpdateVRAM        ; make VRAM changes based on commands in list

[DATLib]
There are two buffers in DATLib:
* tiledata/SCB1
* control/SCB2,3,4

The provided custom vblank interrupt handles uploading the buffers to the VRAM.

--------------------------------------------------------------------------------
[Questions and Thoughts]
* How many sprites can I update/how much data can I push in one VBlank?
* Will likely need to provide some conversion routines for vram data
* Current metasprite system does not account for all possibilities; chain bit forced
* Is it possible to use the lower bits of SCB4 for custom purposes?
* Sprite index management? (not nearly as ludicrous as NES, but still...)

--------------------------------------------------------------------------------
[Data Formats]
The best formats are those that map to the LSPC...like smkdan's.

VRAM Buffer:
{
$00     (w) data length (in words)
$02     (w) vram address
$04     (w) vram increment
$06...  (w) vram data (in words)
}
repeat until end of buffer (data length 0000)

================================================================================
[Sprite Data]
Overall, Sprites are a combination of the values in SCB1, SCB2, SCB3, and SCB4.

Commands have "spr" prefix.

* Sprite Height (Tiles)
-----------------------
SCB1 (see below)
-----------------------
SCB2{
* Horizontal Shrink (0-F)
* Vertical Shrink (00-FF)
}

SCB3{
* Y position
* Sticky bit
* Sprite size (0-33)
}

SCB4{
* X position
}

<Sprite Data Block>
$00      Sprite Height (tiles)         (word) "spr_height"
$02-$05  Pointer to SCB1 tilemap data  (long) "spr_tilemap"
$06      SCB2 data, native format      (word) "spr_shrink"
$08      SCB3 data, native format      (word) "spr_ypp"
$0A      SCB4 data, native format      (word) "spr_x"

SCB1 data is stored in native format and is limited based on the value of
Sprite Height. Real length of SCB1 data is 2x Sprite Height.

================================================================================
[Tilemap Data for SCB1]
Each sprite in SCB1 has 64 values (32 possible "sub-sprites").
Each spot in a sprite's SCB1 block is two values.

* Tile Number LSB       16 bits > byte 1
-------------------------------
* Palette               8 bits \
* Tile Number MSB       4 bits  | byte 2
* Auto-Anim Flags       2 bits  |
* V/H Flip Flags        2 bits /

Tile index is 20 bits (values 0-1048575/$00000-$FFFFF).

Converting a tile index value of $12345 to SCB1:

LSB = ($12345 & $0FFFF) -> SCB1a
MSB = (($12345 & $F0000)>>12) | SCB1b


sprmac_SCB1Data writes SCB1 data to ROM. However, it assumes you know the
palette and auto-animation values beforehand. This may not always be the case.

================================================================================
[Metasprite Data]
Metasprites are a collection of Sprites. On the Neo-Geo, it's a bit easier to
make metasprites, compared to other consoles. SCB3's Sprite height and Sticky
bit go a long way in making metasprites easier to deal with.

Commands have "mspr" prefix.

<Thoughts on Metasprites>
the current system is limited, and I keep having to go back and change the
WIP metasprite block definition as I remember more and more things about the
Neo-Geo sprite hardware, so I'm just going to plan this out before making
any more changes.

(Metasprite as a whole)
* number of components  [byte]

(Metasprite components)
* number of sprites     [byte]
* sprite size (tiles)   [byte]
* palette               [byte]
* sticky bit            [byte] attach to previous sprite
* offset x/y position   [word] one word each
* scale value           [word]
* pointer to tilemap    [long]

Of course, this doesn't even factor animation in...

--------------------------------------------------------------------------------
<Metasprite Data Block (current, but deprecated)>
$00         Number of Sprites in Metasprite     (word)
$02...end   Pointers to Sprite data             (long)

--------------------------------------------------------------------------------
<WIP new metasprite data block (not final; will change)>
$00         Number of Metasprite components     (word)
------------
$02         Number of sprites in Component 1    (byte)
$03         Component 1 sprite size/height      (byte)
$04         Component 1 palette                 (byte)
$05         Component 1 sticky bit              (byte)
$06         Component 1 overall X offset        (word)
$08         Component 1 overall Y offset        (word)
$0A         Component 1 scale value             (word)
$0C         Pointers to Component 1 Tilemaps    (long)
............
etc.


================================================================================
<Function Sketchpad>

(Overall)
Active Sprites (for keeping track)
VRAM Buffers
 * background layers
 * etc.

(Metasprite)
Functions for dealing with a metasprite
* Add metasprite to active pool
* Remove metasprite from active pool
* Change metasprite X position
* Change metasprite Y position
* Change metasprite Horiz flip
* Change metasprite Vert flip
* Change metasprite Animation

(Sprite)
Functions for dealing with a single sprite
* Clear sprite (set SCB3 sprite size = 0, unstick?)
* Change sprite X position
* Change sprite Y position
* Change sprite palette
* Change sprite Horiz. flip
* Change sprite Vert. flip
* Change sprite tilemap

================================================================================
todo: actual documentation of existing code
* mspr_Load

================================================================================
[spr_LoadDirect]
Loads a single sprite directly into the VRAM.

Can be called on its own, or by mspr_Load.

(Params)
d0		[word] Sprite index (0-511; sprite 0 is not recommended!)
a0		[long] Pointer to Sprite Data Block

================================================================================
[sprmac_SCB1Data]
Writes a single SCB1 data entry into the binary.

This macro converts normal values to their SCB1 equivalents.
You will want to use this macro multiple times for Sprites with Height > 1.

(Params)
\1		Tile Number					(long) 20 bits; SCB1 even, SCB1 odd (bits 4-7)
\2		Palette Number				(byte) 8 bits; SCB1 odd (bits 8-15)
\3		Auto-Animation (0/4/8)		(byte) 2 bits; SCB1 odd (bits 2,3) 4=2bit, 8=3bit
\4		Vertical Flip				(byte) 1 bit; SCB1 odd (bit 1)
\5		Horizontal Flip				(byte) 1 bit; SCB1 odd (bit 0)

================================================================================
[sprmac_SpriteData]
Writes Sprite data into the binary.

This macro converts normal values to their SCB* section equivalents.
(Aside from SCB1 tilemaps, which are handled with the sprmac_SCB1Data macro.)

; Major Note: This does not handle the sticky bit in SCB3.

(Params)
\1		Sprite Height (in tiles)	(word) (bottom 6 bits of SCB3)
\2		X position					(word) 9 bits (SCB4); converted to X<<7
\3		Y position					(word) 9 bits (SCB3); converted to (496-Y)<<7
\4		SCB1 tilemap data Pointer	(long)
\5		Horizontal Shrink (0-F)		(byte)
\6		Vertical Shrink (00-FF)		(byte)
