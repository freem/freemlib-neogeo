freemlib for Neo-Geo - Fix Layer functionality
==============================================
The Fix layer displays over everything else.

Most fix layer writing is done with MESS_OUT and the system buffer.
Everything in here is (or should be) handled via raw LSPC reads/writes.

When it comes to positioning items on the Fix layer, there's two formats:
1) Default raw VRAM addresses (do most games do this?) ($7000-$74FF)
2) X and Y cells (Puzzle de Pon!, Art of Fighting, other games?)
 * The fix map is 40x32 cells in total size; visible area depends on NTSC/PAL.
   Most games cut off the left and right columns for a 38 tile wide area.
   FIX_CLEAR seems to do this by default.

0, 0 = $7000
0, 1 = $7001
0, 2 = $7002
...........
0,15 = $700F
0,16 = $7010
...........
0,31 = $701F
...........
1, 0 = $7020
etc.

The functions are dual-compatible thanks to a helper macro (fixmac_CalcVRAMAddr).
If the first value is >= $7000, then it's a raw VRAM address, otherwise it's a
combined cell location.

Combined cell location format: $XXYY, where XX=$00-$27,YY=$00-$1F
No sanity checking is done in the macro, so keep the values within those ranges.

This might anger you slightly if you only want to use $7000-$74FF, as expanding
the macro each time also expands the code size. You're free to modify the macro
as you see fit for your own projects, but I'm keeping it like this for now.

Note: The fix layer can only use the first 16 palettes.
Note: None of these functions take fix bankswitching into account.

Looking for another project? You could always rewrite MESS_OUT... ;)

todo:
* Oversize Fix techniques (NEO-CMC42, NEO-CMC50)
* Verify correct operation of various routines
* Solve partial charmap problem (see charmap.txt)

================================================================================
[fix_UpdateTile]
Change the tile number and palette index of a fix map location.

ppppTTTT tttttttt

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[word] New palette index (pppp) and tile number (TTTT tttttttt)

================================================================================
[fix_ChangeTile]
Change the tile number of a fix map location.
Does not attempt to sanitize your input.

xxxx0000 00000000

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[word] New tile number ($000-$FFF)

================================================================================
[fix_ChangePal]
Change the palette index of a fix map location.
Does not attempt to sanitize your input.

0000xxxx xxxxxxxx

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[word] New palette number ($0000-$F000, only incrementing the first value)

================================================================================
[fix_DrawString]
Draws horizontal text to the screen manually. End code is $FF.

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[word] Palette index and tile number MSB
a0		[long] Pointer to string to draw

(Clobbers)
d2		Byte for writing
d3		Used for temporary tile assembly

================================================================================
[fix_Draw8x16]
Draws "normal" 8x16 text to the screen.

Whereas the 8x16 functions of MESS_OUT require your characters to be on different
pages, fix_Draw8x16 lets you stack them right on top of each other, as they're
meant to be seen in game.

Tile Layout:
A B C D
A B C D

So the assumption is if you have:
$10,$11,$12,$13
the line below it will be:
$20,$21,$22,$23

The downside to this is that you need to prepare a character map.
See charmap.txt for more information.

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[byte] Palette index (0-F)
a0		[long] Pointer to string to draw
a1		[long] Pointer to character map

================================================================================
[fix_Draw16x16]
Draws "normal" 16x16 text to the screen.

What fix_Draw8x16 does for 8x16 fonts, this does for 16x16 fonts.

Tile Layout:
AA BB CC DD
AA BB CC DD

still a work in progress

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		Palette index and tile number MSB
a0		[long] Pointer to string to draw
a1		[long] Pointer to character map

================================================================================
[fix_DrawRegion]
Draws a rectangular region of tiles using a single palette and tile number MSB.

todo: rename this to fix_DrawRegionSimple & make fix_DrawRegion operate on words?

(Params)
d0		[word] Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1		[word] Combined rows/columns size ($YYXX)
d2		[byte] Palette index and tile number MSB
a0		[long] Pointer to data to draw

================================================================================
[fix_FillRegion]
Fills a rectangular region of tiles with the specified tile.

(Params)
d0		[word] Combined cell location (x,y) or raw VRAM address ($7000-$74FF)
d1		[word] Combined rows/columns size ($YYXX)
d2		[word] Tile data to use for filling.

;------------------------------------------------------------------------------;
[fix_ClearRegion]
Macro for clearing a region using tile $00FF. (Uses fix_FillRegion)

(Params)
d0		[word] Starting combined cell location (x,y) or raw VRAM address ($7000-$74FF)
d1		[word] Combined rows/columns size ($YYXX)

================================================================================
[fix_CopyToRAM]
Copies Fix tilemap data from VRAM to 68K RAM.

(Params)
a?		[long] Starting 68K RAM location
d?		[word] Starting combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d?		[word] Copy region size ($XXYY)

================================================================================
[fix_WriteFromRAM]
Writes Fix tilemap data from 68K RAM to VRAM.

(Params)
a?		[long] Starting 68K RAM location
d?		[word] Starting combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d?		[word] Write region size ($XXYY)

================================================================================
[fix_ClearAll]
Clears all tiles on the fix layer, including the leftmost and rightmost columns.
Uses tile number $0FF, palette 0.

(Clobbers)
d7		Loop counter

================================================================================
todo: "nametable" writing

In this case, "nametable" means "mapping of tiles on the Fix layer". The data
may or may not be compressed, but there should be some sort of RLE because screw
storing a bunch of the same value in a row, even when Neo P ROMs can be so huge.

"fix_WriteNametable"
* Location of nametable data to write
* Starting VRAM location
* Something about VRAM increment

{"Nametable" Data}
Thinking about this... Do I want to leverage the 68K's ability to read longwords
at the cost of data possibly ballooning in size?

Should the data length and flags even be larger than a byte?

* Data Length and Config (word)
00000000 00000000
|||||||| |______|
||||||||     |
||||||||     |_________ Data length (byte)
||||||||_______________ ???
|||||||________________ ???
||||||_________________ ???
|||||__________________ ???
||||___________________ ???
|||____________________ ???
||_____________________ ???
|______________________ ???

* Data Length and Config (long)
00000000 00000000 00000000 00000000
|||||||| |______| |_______________|
||||||||     |            |
||||||||     |            |__________ Data length (word)
||||||||     |_______________________ (currently unused)
||||||||_____________________________ ???
|||||||______________________________ ???
||||||_______________________________ ???
|||||________________________________ ???
||||_________________________________ ???
|||__________________________________ ???
||___________________________________ ???
|____________________________________ ???
Things to find positions for:
>> VRAM increment (0=+1, 1=+32)
>> Uses compression (0=no, 1=yes)
  > Would there be multiple compression types? Does it really matter?

* Data codes
Still trying to find the best way of storing this information, both compressed
and uncompressed. I don't want to have to use longs everywhere.

Native Fix VRAM format is
00000000 00000000
|__||___________|
  |       |
  |       |_______________ Fix tile index
  |_______________________ Fix palette


You could force processing by requiring sequences to be marked, but that has the
possibility of expanding the data as well.

00000000 00000000
|__||___________|
  |       |
  |       |_______________ Sequence length (0-4095)
  |_______________________ Command nibble

Commands
* 0000    Uncompressed data (words)
* 0001    Repeat next word (sequence length) times
* 0010    
* 0011    
* 0100    
* 0101    
* 0110    
* 0111    
* 1000    
* 1001    
* 1010    
* 1011    
* 1100    
* 1101    
* 1110    
* 1111    
